{"version":3,"sources":["redux/actions.js","redux/reducers.js","redux/store.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Container/Container.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["addContact","createAction","deleteContact","filterContacts","contacts","createReducer","state","action","payload","filter","contact","id","_","rootReducer","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","storeConf","persistor","persistStore","getContacts","filterValue","filteredContacts","name","toLowerCase","includes","trim","ContactForm","useState","number","setState","useSelector","dispatch","useDispatch","handleChange","e","target","value","prev","onSubmit","preventDefault","find","toast","info","autoClose","shortid","generate","className","type","pattern","title","required","onChange","ContactList","map","onClick","Container","children","Filter","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.bf16efcb.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction(\"contacts/addContact\");\r\nexport const deleteContact = createAction(\"contacts/deleteContact\");\r\n\r\nexport const filterContacts = createAction(\"contacts/filterContacts\");\r\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, filterContacts } from \"./actions\";\r\n\r\nconst contacts = createReducer([], {\r\n  [addContact]: (state, action) => [...state, action.payload],\r\n  [deleteContact]: (state, action) =>\r\n    state.filter((contact) => contact.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [filterContacts]: (_, action) => action.payload,\r\n});\r\n\r\nconst rootReducer = combineReducers({ contacts, filter });\r\n\r\nexport default rootReducer;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  devTools: true,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst storeConf = { store, persistor };\r\n\r\nexport default storeConf;\r\n","export const getContacts = (state) => state.contacts;\r\nexport const filterValue = (state) => state.filter;\r\nexport const filteredContacts = ({ contacts, filter }) => {\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.trim().toLowerCase())\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\nimport \"../ContactForm/ContactForm.css\";\r\nimport { addContact } from \"../../redux/actions\";\r\nimport { getContacts } from \"../../redux/selectors\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport shortid from \"shortid\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction ContactForm() {\r\n  const [state, setState] = useState({ name: \"\", number: \"\" });\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const checkRepeatName = (name) => {\r\n    return contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n  };\r\n\r\n  const checkRepeatNumber = (number) => {\r\n    return contacts.find((contact) => contact.number === number);\r\n  };\r\n\r\n  const handleSubmite = (e) => {\r\n    e.preventDefault();\r\n    // onSubmite(state);\r\n    if (checkRepeatName(state.name)) {\r\n      toast.info(`'${state.name}' is already in use!`, {\r\n        autoClose: 2500,\r\n      });\r\n    } else if (checkRepeatNumber(state.number)) {\r\n      toast.info(`🤔 ${state.number} is already in use`, {\r\n        autoClose: 2500,\r\n      });\r\n    } else {\r\n      dispatch(addContact({ ...state, id: shortid.generate() }));\r\n      setState({ name: \"\", number: \"\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form id=\"contact\" onSubmit={handleSubmite}>\r\n      <label>\r\n        <p>Name:</p>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={state.name}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        <p>Number:</p>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={state.number}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className=\"submit-button\">\r\n        Add contact\r\n      </button>\r\n      <ToastContainer />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import \"../ContactList/ContactList.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { filteredContacts } from \"../../redux/selectors\";\r\nimport { deleteContact } from \"../../redux/actions\";\r\n\r\nfunction ContactList() {\r\n  const contacts = useSelector(filteredContacts);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <ul className=\"contact-list\">\r\n      {contacts.map((contact) => (\r\n        <li key={contact.id}>\r\n          <p>Name: {contact.name}</p>\r\n          <p>Number: {contact.number}</p>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => dispatch(deleteContact(contact.id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n","// import T from \"prop-types\";\r\nimport \"../Container/Container.css\";\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n\r\n// Container.propTypes = {\r\n//   children: T.node.isRequired,\r\n// };\r\n\r\nexport default Container;\r\n","import \"../Filter/Filter.css\";\r\nimport { filterContacts } from \"../../redux/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { filterValue } from \"../../redux/selectors\";\r\n\r\nfunction Filter() {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(filterValue);\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      onChange={(e) => dispatch(filterContacts(e.target.value))}\r\n      value={filter}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import \"./App.css\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Container from \"./components/Container/Container\";\nimport Filter from \"./components/Filter/Filter\";\n\nfunction App() {\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}